enum MouseButton {
  left,
  middle,
  right,
  back,
  forward,
  scrollUp,
  scrollDown,
  scrollLeft,
  scrollRight,
}

enum Direction { press, release, click }

enum Coordinate { absolute, relative }

// enum Axis {
//   horizontal,
//   vertical,
// }

enum KeyCode {
  ansiA(0x00),
  ansiS(0x01),
  ansiD(0x02),
  ansiF(0x03),
  ansiH(0x04),
  ansiG(0x05),
  ansiZ(0x06),
  ansiX(0x07),
  ansiC(0x08),
  ansiV(0x09),
  ansiB(0x0B),
  ansiQ(0x0C),
  ansiW(0x0D),
  ansiE(0x0E),
  ansiR(0x0F),
  ansiY(0x10),
  ansiT(0x11),
  ansi1(0x12),
  ansi2(0x13),
  ansi3(0x14),
  ansi4(0x15),
  ansi6(0x16),
  ansi5(0x17),
  ansiEqual(0x18),
  ansi9(0x19),
  ansi7(0x1A),
  ansiMinus(0x1B),
  ansi8(0x1C),
  ansi0(0x1D),
  ansiRightBracket(0x1E),
  ansiO(0x1F),
  ansiU(0x20),
  ansiLeftBracket(0x21),
  ansiI(0x22),
  ansiP(0x23),
  ansiL(0x25),
  ansiJ(0x26),
  ansiQuote(0x27),
  ansiK(0x28),
  ansiSemicolon(0x29),
  ansiBackslash(0x2A),
  ansiComma(0x2B),
  ansiSlash(0x2C),
  ansiN(0x2D),
  ansiM(0x2E),
  ansiPeriod(0x2F),
  ansiGrave(0x32),
  ansiKeypadDecimal(0x41),
  ansiKeypadMultiply(0x43),
  ansiKeypadPlus(0x45),
  ansiKeypadClear(0x47),
  ansiKeypadDivide(0x4B),
  ansiKeypadEnter(0x4C),
  ansiKeypadMinus(0x4E),
  ansiKeypadEqual(0x51),
  ansiKeypad0(0x52),
  ansiKeypad1(0x53),
  ansiKeypad2(0x54),
  ansiKeypad3(0x55),
  ansiKeypad4(0x56),
  ansiKeypad5(0x57),
  ansiKeypad6(0x58),
  ansiKeypad7(0x59),
  ansiKeypad8(0x5B),
  ansiKeypad9(0x5C),
  returnKey(0x24),
  tabKey(0x30),
  spaceKey(0x31),
  deleteKey(0x33),
  escapeKey(0x35),
  commandKey(0x37),
  shiftKey(0x38),
  capsLock(0x39),
  optionKey(0x3A),
  controlKey(0x3B),
  rightCommand(0x36),
  rightShift(0x3C),
  rightOption(0x3D),
  rightControl(0x3E),
  functionKey(0x3F),
  f17(0x40),
  volumeUp(0x48),
  volumeDown(0x49),
  muteKey(0x4A),
  f18(0x4F),
  f19(0x50),
  f20(0x5A),
  f5(0x60),
  f6(0x61),
  f7(0x62),
  f3(0x63),
  f8(0x64),
  f9(0x65),
  f11(0x67),
  f13(0x69),
  f16(0x6A),
  f14(0x6B),
  f10(0x6D),
  f12(0x6F),
  f15(0x71),
  helpKey(0x72),
  homeKey(0x73),
  pageUp(0x74),
  forwardDelete(0x75),
  f4(0x76),
  endKey(0x77),
  f2(0x78),
  pageDown(0x79),
  f1(0x7A),
  leftArrow(0x7B),
  rightArrow(0x7C),
  downArrow(0x7D),
  upArrow(0x7E),
  isoSection(0x0A),
  jisYen(0x5D),
  jisUnderscore(0x5E),
  jisKeypadComma(0x5F),
  jisEisu(0x66),
  jisKana(0x68);

  final int code;
  const KeyCode(this.code);
}

enum KeyCodeWindows {
  vkA(0x41),
  vkS(0x53),
  vkD(0x44),
  vkF(0x46),
  vkH(0x48),
  vkG(0x47),
  vkZ(0x5A),
  vkX(0x58),
  vkC(0x43),
  vkV(0x56),
  vkB(0x42),
  vkQ(0x51),
  vkW(0x57),
  vkE(0x45),
  vkR(0x52),
  vkY(0x59),
  vkT(0x54),
  vk1(0x31),
  vk2(0x32),
  vk3(0x33),
  vk4(0x34),
  vk6(0x36),
  vk5(0x35),
  vkEqual(0x3D),
  vk9(0x39),
  vk7(0x37),
  vkMinus(0x2D),
  vk8(0x38),
  vk0(0x30),
  vkRightBracket(0x5D),
  vkO(0x4F),
  vkU(0x55),
  vkLeftBracket(0x5B),
  vkI(0x49),
  vkP(0x50),
  vkL(0x4C),
  vkJ(0x4A),
  vkQuote(0x27),
  vkK(0x4B),
  vkSemicolon(0x3B),
  vkBackslash(0x5C),
  vkComma(0x2C),
  vkSlash(0x2F),
  vkN(0x4E),
  vkM(0x4D),
  vkPeriod(0x2E),
  vkGrave(0xC0),
  vkNumPadDecimal(0x6E),
  vkNumPadMultiply(0x6A),
  vkNumPadAdd(0x6B),
  vkNumPadDivide(0x6F),
  vkNumPadEnter(0x0D),
  vkNumPadSubtract(0x6D),
  vkNumPad0(0x60),
  vkNumPad1(0x61),
  vkNumPad2(0x62),
  vkNumPad3(0x63),
  vkNumPad4(0x64),
  vkNumPad5(0x65),
  vkNumPad6(0x66),
  vkNumPad7(0x67),
  vkNumPad8(0x68),
  vkNumPad9(0x69),
  vkReturn(0x0D),
  vkTab(0x09),
  vkSpace(0x20),
  vkDelete(0x2E),
  vkEscape(0x1B),
  vkLeftControl(0xA2),
  vkLeftShift(0xA0),
  vkLeftAlt(0xA4),
  vkLeftWin(0x5B),
  vkRightControl(0xA3),
  vkRightShift(0xA1),
  vkRightAlt(0xA5),
  vkRightWin(0x5C),
  vkFunction(0x00),
  vkVolumeUp(0xAF),
  vkVolumeDown(0xAE),
  vkMute(0xAD),
  vkF1(0x70),
  vkF2(0x71),
  vkF3(0x72),
  vkF4(0x73),
  vkF5(0x74),
  vkF6(0x75),
  vkF7(0x76),
  vkF8(0x77),
  vkF9(0x78),
  vkF10(0x79),
  vkF11(0x7A),
  vkF12(0x7B),
  vkHome(0x24),
  vkPageUp(0x21),
  vkEnd(0x23),
  vkPageDown(0x22),
  vkArrowLeft(0x25),
  vkArrowUp(0x26),
  vkArrowRight(0x27),
  vkArrowDown(0x28);

  final int code;
  const KeyCodeWindows(this.code);
}

enum KeyCodeLinux {
  xkA(0x61),
  xkS(0x73),
  xkD(0x64),
  xkF(0x66),
  xkH(0x68),
  xkG(0x67),
  xkZ(0x7A),
  xkX(0x78),
  xkC(0x63),
  xkV(0x76),
  xkB(0x62),
  xkQ(0x71),
  xkW(0x77),
  xkE(0x65),
  xkR(0x72),
  xkY(0x79),
  xkT(0x74),
  xk1(0x31),
  xk2(0x32),
  xk3(0x33),
  xk4(0x34),
  xk6(0x36),
  xk5(0x35),
  xkEqual(0x3D),
  xk9(0x39),
  xk7(0x37),
  xkMinus(0x2D),
  xk8(0x38),
  xk0(0x30),
  xkRightBracket(0x5D),
  xkO(0x6F),
  xkU(0x75),
  xkLeftBracket(0x5B),
  xkI(0x69),
  xkP(0x70),
  xkL(0x6C),
  xkJ(0x6A),
  xkQuote(0x27),
  xkK(0x6B),
  xkSemicolon(0x3B),
  xkBackslash(0x5C),
  xkComma(0x2C),
  xkSlash(0x2F),
  xkN(0x6E),
  xkM(0x6D),
  xkPeriod(0x2E),
  xkGrave(0x60),
  xkNumPadDecimal(0xFFAE),
  xkNumPadMultiply(0xFFAA),
  xkNumPadAdd(0xFFAB),
  xkNumPadDivide(0xFFAF),
  xkNumPadEnter(0xFF8D),
  xkNumPadSubtract(0xFFAD),
  xkNumPad0(0xFFB0),
  xkNumPad1(0xFFB1),
  xkNumPad2(0xFFB2),
  xkNumPad3(0xFFB3),
  xkNumPad4(0xFFB4),
  xkNumPad5(0xFFB5),
  xkNumPad6(0xFFB6),
  xkNumPad7(0xFFB7),
  xkNumPad8(0xFFB8),
  xkNumPad9(0xFFB9),
  xkReturn(0xFF0D),
  xkTab(0xFF09),
  xkSpace(0x0020),
  xkDelete(0xFFFF),
  xkEscape(0xFF1B),
  xkLeftControl(0xFFE3),
  xkLeftShift(0xFFE1),
  xkLeftAlt(0xFFE9),
  xkLeftWin(0xFFEB),
  xkRightControl(0xFFE4),
  xkRightShift(0xFFE2),
  xkRightAlt(0xFFEA),
  xkRightWin(0xFFEC),
  xkFunction(0x0000), // Linux doesn't have a function key
  xkVolumeUp(0x1008FF13),
  xkVolumeDown(0x1008FF11),
  xkMute(0x1008FF12),
  xkF1(0xFFBE),
  xkF2(0xFFBF),
  xkF3(0xFFC0),
  xkF4(0xFFC1),
  xkF5(0xFFC2),
  xkF6(0xFFC3),
  xkF7(0xFFC4),
  xkF8(0xFFC5),
  xkF9(0xFFC6),
  xkF10(0xFFC7),
  xkF11(0xFFC8),
  xkF12(0xFFC9),
  xkHome(0xFF50),
  xkPageUp(0xFF55),
  xkEnd(0xFF57),
  xkPageDown(0xFF56),
  xkArrowLeft(0xFF51),
  xkArrowUp(0xFF52),
  xkArrowRight(0xFF53),
  xkArrowDown(0xFF54);

  final int code;
  const KeyCodeLinux(this.code);
}

// Universal key identifiers
enum UniversalKey {
  // Letters
  a,
  s,
  d,
  f,
  h,
  g,
  z,
  x,
  c,
  v,
  b,
  q,
  w,
  e,
  r,
  y,
  t,
  i,
  o,
  u,
  p,
  l,
  j,
  k,
  n,
  m,

  // Numbers
  num1,
  num2,
  num3,
  num4,
  num5,
  num6,
  num7,
  num8,
  num9,
  num0,

  // Symbols
  equal,
  minus,
  rightBracket,
  leftBracket,
  quote,
  semicolon,
  backslash,
  comma,
  slash,
  period,
  grave,

  // Numpad
  numPadDecimal,
  numPadMultiply,
  numPadAdd,
  numPadDivide,
  numPadEnter,
  numPadSubtract,
  numPad0,
  numPad1,
  numPad2,
  numPad3,
  numPad4,
  numPad5,
  numPad6,
  numPad7,
  numPad8,
  numPad9,

  // Special keys
  returnKey,
  tab,
  space,
  delete,
  escape,

  // Modifiers
  leftControl,
  leftShift,
  leftAlt,
  leftCommand,
  rightControl,
  rightShift,
  rightAlt,
  rightCommand,
  capsLock,
  function,

  // Function keys
  f1,
  f2,
  f3,
  f4,
  f5,
  f6,
  f7,
  f8,
  f9,
  f10,
  f11,
  f12,
  f13,
  f14,
  f15,
  f16,
  f17,
  f18,
  f19,
  f20,

  // Arrow keys
  arrowLeft,
  arrowRight,
  arrowUp,
  arrowDown,

  // Navigation
  home,
  end,
  pageUp,
  pageDown,
  help,

  // Media
  volumeUp,
  volumeDown,
  mute,

  // Other
  forwardDelete,
}
